'use strict';
module.exports = function(configuration, modules, models, database, queryFiles){
	let AMTController = Object.create(null);

	const logger = modules.logger;
	const log_options = Object.create(null);
	log_options.from = 'AMT-Controlller';

	const amtModel = models.ActivityMonitoring_model;

	AMTController.viewActivityEvaluation = (req, res) => {
		let renderData = Object.create(null);
		renderData = req.extra_data;
		renderData.csrfToken = req.csrfToken();
		
		
		return res.render('AMT/ActivityEvaluation', renderData);
	};
	
	//TODO: CHANGE SQL TO CURRENT TERM YEAR ONLY
	AMTController.viewActivity = (req, res) => {
		logger.debug('viewActivity()', log_options);

		let renderData = Object.create(null);
		renderData.csrfToken = req.csrfToken();
		renderData.extra_data = req.extra_data;

		const dbParam = {			
			idNumber:req.session.user.idNumber
		};
		
		database.task(t =>{
			return t.batch([amtModel.getAvailableActivityToCheck(),
							amtModel.getAmtMyActivity(dbParam)]);
		}).then(data => {
			renderData.allActivity = data[0];
			renderData.myActivity = data[1];

			logger.debug(`${JSON.stringify(data[0])}`, log_options);
			logger.debug(`${JSON.stringify(data[1])}`, log_options);

			return res.render('AMT/ActivityAssignment', renderData);
		});
		
	};

	AMTController.insertToMyActivityToCheck = (req, res) => {
		let renderData = Object.create(null);
		renderData = req.extra_data;
		renderData.csrfToken = req.csrfToken();
		
		console.log("req.session.user2");
		console.log(req.body);
		
		const dbParam = {
			activity:req.body.id,
			idNumber:req.session.user.idNumber,
			venue:req.body.vid,
		};
		
		amtModel.insertToMyActivityToCheck(dbParam)
		.then(data=>{
			console.log(data);
			return res.send("1");
		}).catch(err=>{
			return res.send("0");
		});
		
	};

	AMTController.removeToMyActivity = (req, res) => {
		let renderData = Object.create(null);
		renderData = req.extra_data;
		renderData.csrfToken = req.csrfToken();
		
		const dbParam = {
			activityId: req.body.id,
			idNumber:req.session.user.idNumber,
		};
		console.log(dbParam);

		amtModel.deleteToMyActivity(dbParam)
		.then(data =>{
			console.log(data);
			return res.send("1");
		}).catch(err => {
			console.log(err);
			return res.send("0");
		});
	};

	AMTController.submitActivityEvaluation = (req, res) =>{
		console.log(req.body);

		//TODO: Activity value will be chosen come from previous page
		//TODO: timeend score is autogenerated
		var activityExecution = parseInt(req.body.activityExecution) + parseInt(req.body.activityExecution2);

		var facilitators = 4
		if(typeof req.body.facilitators1 == "undefined"){
			facilitators = facilitators-1;
		}

		if(typeof req.body.facilitators2 == "undefined"){
			facilitators = facilitators-1;
		}

		if(typeof req.body.facilitators3 == "undefined"){
			facilitators = facilitators-1;
		}

		if(typeof req.body.facilitators4 == "undefined"){
			facilitators = facilitators-1;
		}

		console.log(facilitators);

		const dbParam = {
			activity: 1,
			venue: req.body.venue,
			equipment: req.body.equipment,
			materials: req.body.material,
			registration: req.body.registration,
			timeend: 1,
			activityexecution: activityExecution,
			hosts: req.body.host,
			facilitators: facilitators,
			presentation: req.body.presentation,
			activities: req.body.activities,
			organizationstandingpresentation: req.body.organizationStanding,
			actualstarttime: req.body.timeStart,
			actualendtime: req.body.timeEnd,
			anp: req.body.anp,
			person1ea: req.body.announcement,
			person1loa: req.body.learnings,
			person1iitskoa: req.body.interest,
			person1iomwm: req.body.interaction,
			person2ea: req.body.announcement2,
			person2loa: req.body.learnings2,
			person2iitskoa: req.body.interest2,
			person2iomwm: req.body.interaction2,
			comments: req.body.comments,
			suggestions: req.body.suggestions,
		};

		console.log("DBPARAM");
		console.log(dbParam);

		amtModel.updateAMTActivityEvaluation(dbParam)
		.then(data=>{

		})
		.catch(error=>{
			console.log(error);
		});
	};
	
	return AMTController;
};